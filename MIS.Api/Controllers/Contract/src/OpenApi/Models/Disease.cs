/*
 * Medical Information System (MIS) API
 *
 * API для медицинской информационной системы
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace MIS.Api.Controllers.Contract.OpenApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Disease : IEquatable<Disease>
    {
        /// <summary>
        /// Уникальный идентификатор болезни
        /// </summary>
        /// <value>Уникальный идентификатор болезни</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Название болезни
        /// </summary>
        /// <value>Название болезни</value>
        /* <example>Гипертония</example> */
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Описание болезни
        /// </summary>
        /// <value>Описание болезни</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Хроническая ли болезнь
        /// </summary>
        /// <value>Хроническая ли болезнь</value>
        [Required]
        [DataMember(Name="isChronic", EmitDefaultValue=true)]
        public bool IsChronic { get; set; }

        /// <summary>
        /// Инфекционная ли болезнь
        /// </summary>
        /// <value>Инфекционная ли болезнь</value>
        [Required]
        [DataMember(Name="isInfectious", EmitDefaultValue=true)]
        public bool IsInfectious { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Disease {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsChronic: ").Append(IsChronic).Append("\n");
            sb.Append("  IsInfectious: ").Append(IsInfectious).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Disease)obj);
        }

        /// <summary>
        /// Returns true if Disease instances are equal
        /// </summary>
        /// <param name="other">Instance of Disease to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Disease other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsChronic == other.IsChronic ||
                    
                    IsChronic.Equals(other.IsChronic)
                ) && 
                (
                    IsInfectious == other.IsInfectious ||
                    
                    IsInfectious.Equals(other.IsInfectious)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsChronic.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInfectious.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Disease left, Disease right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Disease left, Disease right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
