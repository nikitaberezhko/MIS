/*
 * Medical Information System (MIS) API
 *
 * API для медицинской информационной системы
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace MIS.Api.Controllers.Contract.OpenApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Doctor : IEquatable<Doctor>
    {
        /// <summary>
        /// Уникальный идентификатор доктора
        /// </summary>
        /// <value>Уникальный идентификатор доктора</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public Contacts Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Specialty
        /// </summary>
        [Required]
        [DataMember(Name="specialty", EmitDefaultValue=false)]
        public DoctorSpecialty Specialty { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [Required]
        [DataMember(Name="license", EmitDefaultValue=false)]
        public License License { get; set; }

        /// <summary>
        /// Активен ли доктор
        /// </summary>
        /// <value>Активен ли доктор</value>
        [Required]
        [DataMember(Name="isActive", EmitDefaultValue=true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Doctor {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Specialty: ").Append(Specialty).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Doctor)obj);
        }

        /// <summary>
        /// Returns true if Doctor instances are equal
        /// </summary>
        /// <param name="other">Instance of Doctor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Doctor other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    Contacts.Equals(other.Contacts)
                ) && 
                (
                    Specialty == other.Specialty ||
                    Specialty != null &&
                    Specialty.Equals(other.Specialty)
                ) && 
                (
                    License == other.License ||
                    License != null &&
                    License.Equals(other.License)
                ) && 
                (
                    IsActive == other.IsActive ||
                    
                    IsActive.Equals(other.IsActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (Specialty != null)
                    hashCode = hashCode * 59 + Specialty.GetHashCode();
                    if (License != null)
                    hashCode = hashCode * 59 + License.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Doctor left, Doctor right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Doctor left, Doctor right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
