/*
 * Medical Information System (MIS) API
 *
 * API для медицинской информационной системы
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace MIS.Api.Controllers.Contract.OpenApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Contacts : IEquatable<Contacts>
    {
        /// <summary>
        /// Номер телефона
        /// </summary>
        /// <value>Номер телефона</value>
        /* <example>+74951234567</example> */
        [DataMember(Name="phone", EmitDefaultValue=true)]
        public string Phone { get; set; }

        /// <summary>
        /// Email адрес
        /// </summary>
        /// <value>Email адрес</value>
        /* <example>patient@example.com</example> */
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }

        /// <summary>
        /// Есть ли номер телефона
        /// </summary>
        /// <value>Есть ли номер телефона</value>
        [DataMember(Name="hasPhone", EmitDefaultValue=true)]
        public bool HasPhone { get; set; }

        /// <summary>
        /// Есть ли email
        /// </summary>
        /// <value>Есть ли email</value>
        [DataMember(Name="hasEmail", EmitDefaultValue=true)]
        public bool HasEmail { get; set; }

        /// <summary>
        /// Есть ли хотя бы один контакт
        /// </summary>
        /// <value>Есть ли хотя бы один контакт</value>
        [DataMember(Name="hasAnyContact", EmitDefaultValue=true)]
        public bool HasAnyContact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contacts {\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  HasPhone: ").Append(HasPhone).Append("\n");
            sb.Append("  HasEmail: ").Append(HasEmail).Append("\n");
            sb.Append("  HasAnyContact: ").Append(HasAnyContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Contacts)obj);
        }

        /// <summary>
        /// Returns true if Contacts instances are equal
        /// </summary>
        /// <param name="other">Instance of Contacts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contacts other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    HasPhone == other.HasPhone ||
                    
                    HasPhone.Equals(other.HasPhone)
                ) && 
                (
                    HasEmail == other.HasEmail ||
                    
                    HasEmail.Equals(other.HasEmail)
                ) && 
                (
                    HasAnyContact == other.HasAnyContact ||
                    
                    HasAnyContact.Equals(other.HasAnyContact)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPhone.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasAnyContact.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Contacts left, Contacts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Contacts left, Contacts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
