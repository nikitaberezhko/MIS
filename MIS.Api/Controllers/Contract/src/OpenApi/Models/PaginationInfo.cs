/*
 * Medical Information System (MIS) API
 *
 * API для медицинской информационной системы
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace MIS.Api.Controllers.Contract.OpenApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaginationInfo : IEquatable<PaginationInfo>
    {
        /// <summary>
        /// Текущая страница
        /// </summary>
        /// <value>Текущая страница</value>
        /* <example>1</example> */
        [Required]
        [DataMember(Name="page", EmitDefaultValue=true)]
        public int Page { get; set; }

        /// <summary>
        /// Размер страницы
        /// </summary>
        /// <value>Размер страницы</value>
        /* <example>20</example> */
        [Required]
        [DataMember(Name="pageSize", EmitDefaultValue=true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Общее количество записей
        /// </summary>
        /// <value>Общее количество записей</value>
        /* <example>150</example> */
        [Required]
        [DataMember(Name="totalCount", EmitDefaultValue=true)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Общее количество страниц
        /// </summary>
        /// <value>Общее количество страниц</value>
        /* <example>8</example> */
        [Required]
        [DataMember(Name="totalPages", EmitDefaultValue=true)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Есть ли следующая страница
        /// </summary>
        /// <value>Есть ли следующая страница</value>
        [DataMember(Name="hasNext", EmitDefaultValue=true)]
        public bool HasNext { get; set; }

        /// <summary>
        /// Есть ли предыдущая страница
        /// </summary>
        /// <value>Есть ли предыдущая страница</value>
        [DataMember(Name="hasPrevious", EmitDefaultValue=true)]
        public bool HasPrevious { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaginationInfo {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  HasNext: ").Append(HasNext).Append("\n");
            sb.Append("  HasPrevious: ").Append(HasPrevious).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaginationInfo)obj);
        }

        /// <summary>
        /// Returns true if PaginationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PaginationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginationInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Page == other.Page ||
                    
                    Page.Equals(other.Page)
                ) && 
                (
                    PageSize == other.PageSize ||
                    
                    PageSize.Equals(other.PageSize)
                ) && 
                (
                    TotalCount == other.TotalCount ||
                    
                    TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    TotalPages == other.TotalPages ||
                    
                    TotalPages.Equals(other.TotalPages)
                ) && 
                (
                    HasNext == other.HasNext ||
                    
                    HasNext.Equals(other.HasNext)
                ) && 
                (
                    HasPrevious == other.HasPrevious ||
                    
                    HasPrevious.Equals(other.HasPrevious)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Page.GetHashCode();
                    
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalPages.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasNext.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPrevious.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaginationInfo left, PaginationInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaginationInfo left, PaginationInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
