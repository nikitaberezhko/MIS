/*
 * Medical Information System (MIS) API
 *
 * API для медицинской информационной системы
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using MIS.Api.Controllers.Contract.OpenApi.Converters;
using Newtonsoft.Json;

namespace MIS.Api.Controllers.Contract.OpenApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Patient : IEquatable<Patient>
    {
        /// <summary>
        /// Уникальный идентификатор пациента
        /// </summary>
        /// <value>Уникальный идентификатор пациента</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Номер медицинской карты
        /// </summary>
        /// <value>Номер медицинской карты</value>
        /* <example>MR-2024-123456</example> */
        [Required]
        [DataMember(Name="medicalRecordNumber", EmitDefaultValue=false)]
        public string MedicalRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [Required]
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }


        /// <summary>
        /// Группа крови
        /// </summary>
        /// <value>Группа крови</value>
        [TypeConverter(typeof(CustomEnumConverter<BloodTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BloodTypeEnum
        {
            
            /// <summary>
            /// Enum AEnum for A+
            /// </summary>
            [EnumMember(Value = "A+")]
            AEnum = 1,
            
            /// <summary>
            /// Enum AEnum2 for A-
            /// </summary>
            [EnumMember(Value = "A-")]
            AEnum2 = 2,
            
            /// <summary>
            /// Enum BEnum for B+
            /// </summary>
            [EnumMember(Value = "B+")]
            BEnum = 3,
            
            /// <summary>
            /// Enum BEnum2 for B-
            /// </summary>
            [EnumMember(Value = "B-")]
            BEnum2 = 4,
            
            /// <summary>
            /// Enum ABEnum for AB+
            /// </summary>
            [EnumMember(Value = "AB+")]
            ABEnum = 5,
            
            /// <summary>
            /// Enum ABEnum2 for AB-
            /// </summary>
            [EnumMember(Value = "AB-")]
            ABEnum2 = 6,
            
            /// <summary>
            /// Enum OEnum for O+
            /// </summary>
            [EnumMember(Value = "O+")]
            OEnum = 7,
            
            /// <summary>
            /// Enum OEnum2 for O-
            /// </summary>
            [EnumMember(Value = "O-")]
            OEnum2 = 8
        }

        /// <summary>
        /// Группа крови
        /// </summary>
        /// <value>Группа крови</value>
        [Required]
        [DataMember(Name="bloodType", EmitDefaultValue=true)]
        public BloodTypeEnum BloodType { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public Contacts Contacts { get; set; }

        /// <summary>
        /// Пол пациента
        /// </summary>
        /// <value>Пол пациента</value>
        /* <example>MALE</example> */
        [Required]
        [DataMember(Name="sex", EmitDefaultValue=false)]
        public string Sex { get; set; }

        /// <summary>
        /// ID основного лечащего врача
        /// </summary>
        /// <value>ID основного лечащего врача</value>
        [DataMember(Name="primaryDoctorId", EmitDefaultValue=true)]
        public Guid? PrimaryDoctorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MedicalRecordNumber: ").Append(MedicalRecordNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BloodType: ").Append(BloodType).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  PrimaryDoctorId: ").Append(PrimaryDoctorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Patient)obj);
        }

        /// <summary>
        /// Returns true if Patient instances are equal
        /// </summary>
        /// <param name="other">Instance of Patient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Patient other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    MedicalRecordNumber == other.MedicalRecordNumber ||
                    MedicalRecordNumber != null &&
                    MedicalRecordNumber.Equals(other.MedicalRecordNumber)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    BloodType == other.BloodType ||
                    
                    BloodType.Equals(other.BloodType)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    Contacts.Equals(other.Contacts)
                ) && 
                (
                    Sex == other.Sex ||
                    Sex != null &&
                    Sex.Equals(other.Sex)
                ) && 
                (
                    PrimaryDoctorId == other.PrimaryDoctorId ||
                    PrimaryDoctorId != null &&
                    PrimaryDoctorId.Equals(other.PrimaryDoctorId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (MedicalRecordNumber != null)
                    hashCode = hashCode * 59 + MedicalRecordNumber.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    
                    hashCode = hashCode * 59 + BloodType.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (Sex != null)
                    hashCode = hashCode * 59 + Sex.GetHashCode();
                    if (PrimaryDoctorId != null)
                    hashCode = hashCode * 59 + PrimaryDoctorId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Patient left, Patient right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Patient left, Patient right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
